// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package glog

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogRequest struct {
	Appid                string   `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	Thread               int32    `protobuf:"varint,2,opt,name=thread,proto3" json:"thread,omitempty"`
	Stacktrace           string   `protobuf:"bytes,3,opt,name=stacktrace,proto3" json:"stacktrace,omitempty"`
	Logger               string   `protobuf:"bytes,4,opt,name=logger,proto3" json:"logger,omitempty"`
	Message              string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Exception            string   `protobuf:"bytes,6,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{0}
}

func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *LogRequest) GetThread() int32 {
	if m != nil {
		return m.Thread
	}
	return 0
}

func (m *LogRequest) GetStacktrace() string {
	if m != nil {
		return m.Stacktrace
	}
	return ""
}

func (m *LogRequest) GetLogger() string {
	if m != nil {
		return m.Logger
	}
	return ""
}

func (m *LogRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LogRequest) GetException() string {
	if m != nil {
		return m.Exception
	}
	return ""
}

type Reply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Reply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Reply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*LogRequest)(nil), "proto.LogRequest")
	proto.RegisterType((*Reply)(nil), "proto.Reply")
}

func init() { proto.RegisterFile("log.proto", fileDescriptor_a153da538f858886) }

var fileDescriptor_a153da538f858886 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4b, 0xfc, 0x40,
	0x10, 0xc5, 0xff, 0xf9, 0x27, 0x1b, 0xc9, 0x60, 0xa1, 0x83, 0xc8, 0x22, 0x22, 0x47, 0xaa, 0xd3,
	0xe2, 0x0a, 0xfd, 0x04, 0x16, 0x0a, 0xc2, 0x55, 0xdb, 0x58, 0x8f, 0xc9, 0xb8, 0x1e, 0xe6, 0x32,
	0x71, 0x77, 0x05, 0xfd, 0x4a, 0xb6, 0x7e, 0x41, 0xc9, 0x5c, 0xe4, 0x2c, 0x53, 0xed, 0xbc, 0xf7,
	0x7e, 0xc3, 0x3e, 0x06, 0xaa, 0x4e, 0xfc, 0x6a, 0x08, 0x92, 0x04, 0x8d, 0x3e, 0xf5, 0x57, 0x06,
	0xb0, 0x16, 0xef, 0xf8, 0xed, 0x9d, 0x63, 0xc2, 0x13, 0x30, 0x34, 0x0c, 0x9b, 0xd6, 0x66, 0x8b,
	0x6c, 0x59, 0xb9, 0x9d, 0xc0, 0x53, 0x28, 0xd3, 0x4b, 0x60, 0x6a, 0xed, 0xff, 0x45, 0xb6, 0x34,
	0x6e, 0x52, 0x78, 0x01, 0x10, 0x13, 0x35, 0xaf, 0x29, 0x50, 0xc3, 0x36, 0xd7, 0x95, 0x3f, 0xce,
	0xb8, 0xd7, 0x89, 0xf7, 0x1c, 0x6c, 0xa1, 0xd9, 0xa4, 0xd0, 0xc2, 0xc1, 0x96, 0x63, 0x24, 0xcf,
	0xd6, 0x68, 0xf0, 0x2b, 0xf1, 0x1c, 0x2a, 0xfe, 0x68, 0x78, 0x48, 0x1b, 0xe9, 0x6d, 0xa9, 0xd9,
	0xde, 0xa8, 0x6f, 0xc1, 0x38, 0x1e, 0xba, 0x4f, 0x44, 0x28, 0x1a, 0x69, 0x59, 0x5b, 0x1a, 0xa7,
	0x33, 0x1e, 0x41, 0xbe, 0x8d, 0x5e, 0x1b, 0x56, 0x6e, 0x1c, 0x47, 0xaa, 0xa5, 0x44, 0x53, 0x31,
	0x9d, 0xaf, 0xbf, 0x33, 0xc8, 0xd7, 0xe2, 0xf1, 0x12, 0x8a, 0x87, 0xfe, 0x59, 0xf0, 0x78, 0x77,
	0x8e, 0xd5, 0xfe, 0x06, 0x67, 0x87, 0x93, 0xa5, 0x5f, 0xd5, 0xff, 0x46, 0xf4, 0x91, 0x42, 0x3f,
	0x07, 0xbd, 0x02, 0x73, 0x17, 0x82, 0x84, 0x99, 0xec, 0x3d, 0x25, 0xea, 0x66, 0xb0, 0x4f, 0xa5,
	0xca, 0x9b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x43, 0x6f, 0x34, 0xc0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogClient interface {
	Info(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Reply, error)
	Warn(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Reply, error)
	Error(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Reply, error)
	Fatal(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Reply, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Info(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/proto.Log/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Warn(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/proto.Log/Warn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Error(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/proto.Log/Error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Fatal(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/proto.Log/Fatal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServer is the server API for Log service.
type LogServer interface {
	Info(context.Context, *LogRequest) (*Reply, error)
	Warn(context.Context, *LogRequest) (*Reply, error)
	Error(context.Context, *LogRequest) (*Reply, error)
	Fatal(context.Context, *LogRequest) (*Reply, error)
}

// UnimplementedLogServer can be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (*UnimplementedLogServer) Info(ctx context.Context, req *LogRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedLogServer) Warn(ctx context.Context, req *LogRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warn not implemented")
}
func (*UnimplementedLogServer) Error(ctx context.Context, req *LogRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (*UnimplementedLogServer) Fatal(ctx context.Context, req *LogRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fatal not implemented")
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Log/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Info(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Log/Warn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Warn(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Log/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Error(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Fatal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Fatal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Log/Fatal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Fatal(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Log_Info_Handler,
		},
		{
			MethodName: "Warn",
			Handler:    _Log_Warn_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _Log_Error_Handler,
		},
		{
			MethodName: "Fatal",
			Handler:    _Log_Fatal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}
